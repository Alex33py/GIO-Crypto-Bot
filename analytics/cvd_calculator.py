#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cumulative Volume Delta (CVD) Calculator
–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–ª—å—Ç–∞ –æ–±—ä—ë–º–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–¥–∞–≤—Ü–æ–≤
"""

import time
from typing import List, Dict, Optional
from collections import deque
from config.settings import logger
from utils.validators import DataValidator
from utils.error_logger import ErrorLogger


class CumulativeVolumeDelta:
    """
    –†–∞—Å—á—ë—Ç CVD –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è

    CVD —Ä–∞—Å—Ç—ë—Ç = –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø–æ–∫—É–ø–∫–∏ (BUY pressure)
    CVD –ø–∞–¥–∞–µ—Ç = –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏ (SELL pressure)
    """

    def __init__(self, max_history: int = 10000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CVD Calculator

        Args:
            max_history: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        self.cvd = 0.0
        self.history = deque(maxlen=max_history)
        self.total_buy_volume = 0.0
        self.total_sell_volume = 0.0
        self.last_update = time.time()

        logger.info(f"‚úÖ CVD Calculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (max_history={max_history})")

    def update(self, trades: List[Dict]) -> float:
        """
        –û–±–Ω–æ–≤–∏—Ç—å CVD –Ω–∞ –æ—Å–Ω–æ–≤–µ aggTrades

        Args:
            trades: –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ —Å –ø–æ–ª—è–º–∏ [price, size, side, timestamp]

        Returns:
            –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ CVD
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not trades or not isinstance(trades, list):
                logger.warning("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ trades –¥–ª—è CVD")
                return self.cvd

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
            for trade in trades:
                try:
                    side = trade.get("side", "").upper()
                    size = float(trade.get("size", 0))

                    if side == "BUY":
                        self.cvd += size
                        self.total_buy_volume += size
                    elif side == "SELL":
                        self.cvd -= size
                        self.total_sell_volume += size
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏: {side}")

                except (ValueError, TypeError) as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ trade: {e}")
                    continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history.append({
                "timestamp": time.time(),
                "cvd": self.cvd,
                "buy_volume": self.total_buy_volume,
                "sell_volume": self.total_sell_volume
            })

            self.last_update = time.time()

            logger.debug(
                f"üìä CVD –æ–±–Ω–æ–≤–ª—ë–Ω: {self.cvd:,.2f} "
                f"(+{self.total_buy_volume:,.2f} / -{self.total_sell_volume:,.2f})"
            )

            return self.cvd

        except Exception as e:
            ErrorLogger.log_calculation_error(
                calculation_name="CVD Update",
                input_data={"trades_count": len(trades) if trades else 0},
                error=e
            )
            return self.cvd

    def get_trend(self, lookback_periods: int = 10) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ CVD

        Args:
            lookback_periods: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            "BULLISH", "BEARISH" –∏–ª–∏ "NEUTRAL"
        """
        try:
            if len(self.history) < lookback_periods:
                return "NEUTRAL"

            recent = list(self.history)[-lookback_periods:]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç
            if all(recent[i]["cvd"] > recent[i-1]["cvd"] for i in range(1, len(recent))):
                return "BULLISH"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
            elif all(recent[i]["cvd"] < recent[i-1]["cvd"] for i in range(1, len(recent))):
                return "BEARISH"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –¥–µ–ª—å—Ç—ã
            else:
                cvd_values = [p["cvd"] for p in recent]
                avg_delta = (cvd_values[-1] - cvd_values[0]) / len(cvd_values)

                if avg_delta > 0:
                    return "BULLISH"
                elif avg_delta < 0:
                    return "BEARISH"
                else:
                    return "NEUTRAL"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è CVD —Ç—Ä–µ–Ω–¥–∞: {e}")
            return "NEUTRAL"

    def get_divergence(self, price_history: List[float]) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é –º–µ–∂–¥—É CVD –∏ —Ü–µ–Ω–æ–π

        –ë—ã—á—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç, CVD —Ä–∞—Å—Ç—ë—Ç ‚Üí —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö
        –ú–µ–¥–≤–µ–∂—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç, CVD –ø–∞–¥–∞–µ—Ç ‚Üí —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑

        Args:
            price_history: –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ CVD)

        Returns:
            "BULLISH_DIV", "BEARISH_DIV" –∏–ª–∏ None
        """
        try:
            if len(self.history) < 20 or len(price_history) < 20:
                return None

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π
            recent_cvd = [p["cvd"] for p in list(self.history)[-20:]]
            recent_prices = price_history[-20:]

            # –¢—Ä–µ–Ω–¥—ã
            cvd_trend = recent_cvd[-1] - recent_cvd[0]
            price_trend = recent_prices[-1] - recent_prices[0]

            # –ë—ã—á—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            if price_trend < 0 and cvd_trend > 0:
                logger.info("üìà –ë–´–ß–¨–Ø –î–ò–í–ï–†–ì–ï–ù–¶–ò–Ø: —Ü–µ–Ω–∞‚Üì, CVD‚Üë")
                return "BULLISH_DIV"

            # –ú–µ–¥–≤–µ–∂—å—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            elif price_trend > 0 and cvd_trend < 0:
                logger.info("üìâ –ú–ï–î–í–ï–ñ–¨–Ø –î–ò–í–ï–†–ì–ï–ù–¶–ò–Ø: —Ü–µ–Ω–∞‚Üë, CVD‚Üì")
                return "BEARISH_DIV"

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏: {e}")
            return None

    def get_statistics(self, last_n_seconds: int = 300) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CVD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–µ–∫—É–Ω–¥

        Args:
            last_n_seconds: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫—É–Ω–¥—ã)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            now = time.time()
            cutoff = now - last_n_seconds

            recent = [p for p in self.history if p["timestamp"] >= cutoff]

            if not recent:
                return {
                    "cvd": self.cvd,
                    "trend": "NEUTRAL",
                    "buy_volume": 0,
                    "sell_volume": 0,
                    "buy_sell_ratio": 0,
                    "delta": 0
                }

            cvd_values = [p["cvd"] for p in recent]
            buy_volumes = [p["buy_volume"] for p in recent]
            sell_volumes = [p["sell_volume"] for p in recent]

            buy_vol = buy_volumes[-1] - buy_volumes[0]
            sell_vol = sell_volumes[-1] - sell_volumes[0]

            buy_sell_ratio = buy_vol / sell_vol if sell_vol > 0 else 0

            delta = cvd_values[-1] - cvd_values[0]

            trend = "BULLISH" if delta > 0 else "BEARISH" if delta < 0 else "NEUTRAL"

            return {
                "cvd": self.cvd,
                "trend": trend,
                "buy_volume": buy_vol,
                "sell_volume": sell_vol,
                "buy_sell_ratio": buy_sell_ratio,
                "delta": delta,
                "period_seconds": last_n_seconds
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ CVD —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "cvd": self.cvd,
                "trend": "NEUTRAL",
                "buy_volume": 0,
                "sell_volume": 0,
                "buy_sell_ratio": 0,
                "delta": 0
            }

    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å CVD (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π)"""
        self.cvd = 0.0
        self.history.clear()
        self.total_buy_volume = 0.0
        self.total_sell_volume = 0.0
        logger.info("üîÑ CVD —Å–±—Ä–æ—à–µ–Ω")

    def get_current_cvd(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ CVD"""
        return self.cvd

    def get_buy_sell_ratio(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∫ –ø—Ä–æ–¥–∞–∂–∞–º"""
        if self.total_sell_volume == 0:
            return 0
        return self.total_buy_volume / self.total_sell_volume


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['CumulativeVolumeDelta']
