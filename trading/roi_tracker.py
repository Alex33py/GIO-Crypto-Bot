# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä ROI —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import asyncio
import aiosqlite
from typing import Dict, List, Optional
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from config.settings import logger, DATABASE_PATH


@dataclass
class ROIMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ ROI –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
    signal_id: str
    symbol: str
    direction: str
    entry_price: float
    stop_loss: float
    tp1: float
    tp2: float
    tp3: float
    tp1_hit: bool = False
    tp2_hit: bool = False
    tp3_hit: bool = False
    sl_hit: bool = False
    current_roi: float = 0.0
    status: str = 'active'
    entry_time: str = field(default_factory=lambda: datetime.now().isoformat())
    close_time: Optional[str] = None
    fills: List[Dict] = field(default_factory=list)
    quality_score: float = 0.0  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è risky entry detection


class ROITracker:
    """–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä ROI —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""

    def __init__(self, telegram_handler=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ROI —Ç—Ä–µ–∫–µ—Ä–∞"""
        self.active_signals: Dict[str, ROIMetrics] = {}
        self.completed_signals: List[ROIMetrics] = []

        # Telegram handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.telegram = telegram_handler

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
        self.tp1_percentage = 0.25  # 25% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ TP1
        self.tp2_percentage = 0.50  # 50% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ TP2
        self.tp3_percentage = 0.25  # 25% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ TP3

        logger.info("‚úÖ ROITracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–µ–π –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")

    async def register_signal(self, signal: Dict) -> str:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        signal_id = f"{signal['symbol']}_{int(datetime.now().timestamp())}"

        metrics = ROIMetrics(
            signal_id=signal_id,
            symbol=signal['symbol'],
            direction=signal['direction'],
            entry_price=signal['entry_price'],
            stop_loss=signal['stop_loss'],
            tp1=signal.get('tp1', 0),
            tp2=signal.get('tp2', 0),
            tp3=signal.get('tp3', 0),
            quality_score=signal.get('quality_score', 0)  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        )

        self.active_signals[signal_id] = metrics

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await self._save_signal_to_db(metrics)

        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª {signal_id} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ROI")
        return signal_id

    async def update_signal_price(self, signal_id: str, current_price: float) -> Optional[Dict]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ TP/SL –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        """
        if signal_id not in self.active_signals:
            return None

        metrics = self.active_signals[signal_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TP/SL
        event = None

        if metrics.direction == 'long':
            # –î–ª—è –ª–æ–Ω–≥–∞
            # TP3 (—Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–ª—å)
            if not metrics.tp3_hit and current_price >= metrics.tp3:
                metrics.tp3_hit = True
                event = await self._handle_tp_hit(metrics, 'tp3', current_price)

            # TP2
            elif not metrics.tp2_hit and current_price >= metrics.tp2:
                metrics.tp2_hit = True
                event = await self._handle_tp_hit(metrics, 'tp2', current_price)

            # TP1
            elif not metrics.tp1_hit and current_price >= metrics.tp1:
                metrics.tp1_hit = True
                event = await self._handle_tp_hit(metrics, 'tp1', current_price)

            # Stop Loss
            elif not metrics.sl_hit and current_price <= metrics.stop_loss:
                metrics.sl_hit = True
                event = await self._handle_sl_hit(metrics, current_price)

        elif metrics.direction == 'short':
            # –î–ª—è —à–æ—Ä—Ç–∞
            # TP3 (—Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–ª—å)
            if not metrics.tp3_hit and current_price <= metrics.tp3:
                metrics.tp3_hit = True
                event = await self._handle_tp_hit(metrics, 'tp3', current_price)

            # TP2
            elif not metrics.tp2_hit and current_price <= metrics.tp2:
                metrics.tp2_hit = True
                event = await self._handle_tp_hit(metrics, 'tp2', current_price)

            # TP1
            elif not metrics.tp1_hit and current_price <= metrics.tp1:
                metrics.tp1_hit = True
                event = await self._handle_tp_hit(metrics, 'tp1', current_price)

            # Stop Loss
            elif not metrics.sl_hit and current_price >= metrics.stop_loss:
                metrics.sl_hit = True
                event = await self._handle_sl_hit(metrics, current_price)

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π ROI
        metrics.current_roi = await self._calculate_current_roi(metrics, current_price)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await self._update_signal_in_db(metrics)

        return event

    async def _handle_tp_hit(self, metrics: ROIMetrics, tp_level: str, price: float) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Take Profit —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        if tp_level == 'tp1':
            close_percent = self.tp1_percentage
        elif tp_level == 'tp2':
            close_percent = self.tp2_percentage
        else:  # tp3
            close_percent = self.tp3_percentage

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
        if metrics.direction == 'long':
            profit_percent = ((price - metrics.entry_price) / metrics.entry_price) * 100
        else:
            profit_percent = ((metrics.entry_price - price) / metrics.entry_price) * 100

        weighted_profit = profit_percent * close_percent

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–∫—Å–∞—Ü–∏—é
        fill = {
            'level': tp_level,
            'price': price,
            'percentage': close_percent,
            'profit_percent': profit_percent,
            'weighted_profit': weighted_profit,
            'timestamp': datetime.now().isoformat()
        }

        metrics.fills.append(fill)

        logger.info(f"‚úÖ {tp_level.upper()} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {metrics.signal_id}! –¶–µ–Ω–∞: {price}, –ü—Ä–∏–±—ã–ª—å: +{profit_percent:.2f}% (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è: +{weighted_profit:.2f}%)")

        # ‚úÖ –û–¢–ü–†–ê–í–ö–ê TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
        await self._send_tp_notification(metrics, tp_level, price, profit_percent)

        # –ï—Å–ª–∏ —ç—Ç–æ TP3 –∏–ª–∏ –≤—Å–µ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
        if tp_level == 'tp3' or (metrics.tp1_hit and metrics.tp2_hit and metrics.tp3_hit):
            await self._close_signal(metrics, 'completed')

        return {
            'type': 'tp_hit',
            'signal_id': metrics.signal_id,
            'level': tp_level,
            'price': price,
            'profit': weighted_profit
        }

    async def _handle_sl_hit(self, metrics: ROIMetrics, price: float) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Stop Loss —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–±—ã—Ç–æ–∫
        if metrics.direction == 'long':
            loss_percent = ((price - metrics.entry_price) / metrics.entry_price) * 100
        else:
            loss_percent = ((metrics.entry_price - price) / metrics.entry_price) * 100

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏
        closed_percent = sum([
            self.tp1_percentage if metrics.tp1_hit else 0,
            self.tp2_percentage if metrics.tp2_hit else 0,
            self.tp3_percentage if metrics.tp3_hit else 0
        ])

        remaining_percent = 1.0 - closed_percent
        weighted_loss = loss_percent * remaining_percent

        fill = {
            'level': 'stop_loss',
            'price': price,
            'percentage': remaining_percent,
            'profit_percent': loss_percent,
            'weighted_profit': weighted_loss,
            'timestamp': datetime.now().isoformat()
        }

        metrics.fills.append(fill)

        logger.warning(f"üõë STOP LOSS –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {metrics.signal_id}! –¶–µ–Ω–∞: {price}, –£–±—ã—Ç–æ–∫: {weighted_loss:.2f}%")

        # ‚úÖ –û–¢–ü–†–ê–í–ö–ê TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
        await self._send_stop_notification(metrics, price, weighted_loss)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
        await self._close_signal(metrics, 'stopped')

        return {
            'type': 'sl_hit',
            'signal_id': metrics.signal_id,
            'price': price,
            'loss': weighted_loss
        }

    async def _send_tp_notification(self, metrics: ROIMetrics, tp_level: str, price: float, profit_percent: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ TP"""
        if not self.telegram:
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ risky entry
            is_risky = metrics.quality_score < 50

            if tp_level == 'tp1':
                if is_risky:
                    message = (
                        f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ (RISKY ENTRY) üéØ\n\n"
                        f"‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫!\n\n"
                        f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                        f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                        f"üìà Current: ${price:.2f}\n"
                        f"üéØ TP1: ${metrics.tp1:.2f}\n"
                        f"üíµ Profit: {profit_percent:.2f}%\n\n"
                        f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% –ø–æ–∑–∏—Ü–∏–∏\n"
                        f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                        f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP2"
                    )
                else:
                    message = (
                        f"üéØ TP1 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                        f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                        f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                        f"üìà Current: ${price:.2f}\n"
                        f"üéØ TP1: ${metrics.tp1:.2f}\n"
                        f"üíµ Profit: {profit_percent:.2f}%\n\n"
                        f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                        f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 25% –ø–æ–∑–∏—Ü–∏–∏\n"
                        f"   ‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫\n"
                        f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP2"
                    )

            elif tp_level == 'tp2':
                message = (
                    f"üéØ TP2 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                    f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                    f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                    f"üìà Current: ${price:.2f}\n"
                    f"üéØ TP2: ${metrics.tp2:.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% –ø–æ–∑–∏—Ü–∏–∏\n"
                    f"   ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –¥–µ—Ä–∂–∏–º –¥–æ TP3\n"
                    f"   ‚Ä¢ –°—Ç–æ–ø —É–∂–µ –≤ –±–µ–∑—É–±—ã—Ç–∫–µ"
                )

            else:  # tp3
                message = (
                    f"üéØ TP3 –î–û–°–¢–ò–ì–ù–£–¢ üéØ\n\n"
                    f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                    f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                    f"üìà Current: ${price:.2f}\n"
                    f"üéØ TP3: ${metrics.tp3:.2f}\n"
                    f"üíµ Profit: {profit_percent:.2f}%\n\n"
                    f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
                    f"   ‚Ä¢ –¢—Ä–µ–π–ª–∏–º –æ—Å—Ç–∞—Ç–æ–∫ (trailing stop)\n"
                    f"   ‚Ä¢ –ò–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                    f"   ‚Ä¢ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞! üéâ"
                )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {tp_level.upper()} –¥–ª—è {metrics.symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è TP: {e}")

    async def _send_stop_notification(self, metrics: ROIMetrics, price: float, loss_percent: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø–∞"""
        if not self.telegram:
            return

        try:
            message = (
                f"üõë –°–¢–û–ü –ê–ö–¢–ò–í–ò–†–û–í–ê–ù üõë\n\n"
                f"üìä {metrics.symbol} {metrics.direction.upper()}\n"
                f"üí∞ Entry: ${metrics.entry_price:.2f}\n"
                f"üìâ Current: ${price:.2f}\n"
                f"üõë Stop Loss: ${metrics.stop_loss:.2f}\n"
                f"üí∏ Loss: {loss_percent:.2f}%\n\n"
                f"‚ùå –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞\n"
                f"   ‚Ä¢ –£–±—ã—Ç–æ–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
                f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã\n"
                f"   ‚Ä¢ –ñ–¥—ë–º –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"
            )

            await self.telegram.send_alert(message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ STOP –¥–ª—è {metrics.symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è STOP: {e}")

    async def _calculate_current_roi(self, metrics: ROIMetrics, current_price: float) -> float:
        """–†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–≥–æ ROI —Å —É—á—ë—Ç–æ–º –∑–∞–∫—Ä—ã—Ç—ã—Ö —á–∞—Å—Ç–µ–π"""

        # ROI –æ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —á–∞—Å—Ç–µ–π
        closed_roi = sum([fill['weighted_profit'] for fill in metrics.fills])

        # ROI –æ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —á–∞—Å—Ç–∏
        closed_percent = sum([
            self.tp1_percentage if metrics.tp1_hit else 0,
            self.tp2_percentage if metrics.tp2_hit else 0,
            self.tp3_percentage if metrics.tp3_hit else 0
        ])

        remaining_percent = 1.0 - closed_percent

        if remaining_percent > 0:
            if metrics.direction == 'long':
                unrealized_profit = ((current_price - metrics.entry_price) / metrics.entry_price) * 100
            else:
                unrealized_profit = ((metrics.entry_price - current_price) / metrics.entry_price) * 100

            unrealized_roi = unrealized_profit * remaining_percent
        else:
            unrealized_roi = 0.0

        total_roi = closed_roi + unrealized_roi

        return total_roi

    async def _close_signal(self, metrics: ROIMetrics, status: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å –≤ completed"""
        metrics.status = status
        metrics.close_time = datetime.now().isoformat()

        # –§–∏–Ω–∞–ª—å–Ω—ã–π ROI
        final_roi = sum([fill['weighted_profit'] for fill in metrics.fills])
        metrics.current_roi = final_roi

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ completed
        self.completed_signals.append(metrics)
        del self.active_signals[metrics.signal_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await self._update_signal_in_db(metrics, final=True)

        logger.info(f"üèÅ –°–∏–≥–Ω–∞–ª {metrics.signal_id} –∑–∞–∫—Ä—ã—Ç. –°—Ç–∞—Ç—É—Å: {status}, –§–∏–Ω–∞–ª—å–Ω—ã–π ROI: {final_roi:+.2f}%")

    async def get_statistics(self, days: int = 30) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ROI –∑–∞ –ø–µ—Ä–∏–æ–¥"""

        cutoff_date = datetime.now() - timedelta(days=days)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        recent_signals = [
            s for s in self.completed_signals
            if s.close_time and datetime.fromisoformat(s.close_time) > cutoff_date
        ]

        if not recent_signals:
            return {
                'total_signals': 0,
                'win_rate': 0.0,
                'average_roi': 0.0,
                'total_roi': 0.0
            }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(recent_signals)
        wins = len([s for s in recent_signals if s.current_roi > 0])
        losses = len([s for s in recent_signals if s.current_roi <= 0])

        win_rate = (wins / total) * 100 if total > 0 else 0
        average_roi = sum([s.current_roi for s in recent_signals]) / total
        total_roi = sum([s.current_roi for s in recent_signals])

        return {
            'total_signals': total,
            'wins': wins,
            'losses': losses,
            'win_rate': win_rate,
            'average_roi': average_roi,
            'total_roi': total_roi,
            'period_days': days
        }

    async def _save_signal_to_db(self, metrics: ROIMetrics):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            async with aiosqlite.connect(DATABASE_PATH) as db:
                await db.execute("""
                    INSERT INTO signals (
                        signal_id, symbol, side, entry_price, stop_loss,
                        tp1, tp2, tp3, status, timestamp
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    metrics.signal_id, metrics.symbol, metrics.direction,
                    metrics.entry_price, metrics.stop_loss,
                    metrics.tp1, metrics.tp2, metrics.tp3,
                    metrics.status, metrics.entry_time
                ))
                await db.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")

    async def _update_signal_in_db(self, metrics: ROIMetrics, final: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        try:
            async with aiosqlite.connect(DATABASE_PATH) as db:
                if final:
                    await db.execute("""
                        UPDATE signals
                        SET status = ?, roi = ?, close_time = ?
                        WHERE signal_id = ?
                    """, (metrics.status, metrics.current_roi, metrics.close_time, metrics.signal_id))
                else:
                    await db.execute("""
                        UPDATE signals
                        SET roi = ?, tp1_hit = ?, tp2_hit = ?, tp3_hit = ?, sl_hit = ?
                        WHERE signal_id = ?
                    """, (
                        metrics.current_roi, metrics.tp1_hit, metrics.tp2_hit,
                        metrics.tp3_hit, metrics.sl_hit, metrics.signal_id
                    ))
                await db.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î: {e}")
