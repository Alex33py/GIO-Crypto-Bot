#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GIO Crypto Bot v3.0 Enhanced Modular - UNIFIED VERSION
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import pytz
import sys
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
import asyncio
import signal
import pandas as pd
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

try:
    # –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    from config.settings import (
        logger,
        PRODUCTION_MODE,
        DATA_DIR,
        SCENARIOS_DIR,
        DATABASE_PATH,
        TRACKED_SYMBOLS,
        SCANNER_CONFIG,
    )
    from config.constants import TrendDirectionEnum

    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    from core.exceptions import (
        BotInitializationError,
        BotRuntimeError,
        APIConnectionError,
    )
    from utils.validators import DataValidator

    # –£—Ç–∏–ª–∏—Ç—ã
    from utils.helpers import ensure_directory_exists, current_epoch_ms, safe_float
    from utils.performance import async_timed, get_process_executor

    # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
    from connectors.bybit_connector import EnhancedBybitConnector
    from connectors.news_connector import UnifiedNewsConnector

    # ========== –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ï –ú–û–î–£–õ–ò - –û–ë–ù–û–í–õ–ï–ù–û ==========
    from core.memory_manager import AdvancedMemoryManager
    from core.scenario_manager import ScenarioManager
    from core.scenario_matcher import UnifiedScenarioMatcher  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û!
    from core.veto_system import EnhancedVetoSystem
    from core.alerts import AlertSystem
    from core.decision_matrix import DecisionMatrix
    from core.triggers import TriggerSystem
    from core.auto_roi_tracker import AutoROITracker  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
    from core.simple_alerts import SimpleAlertsSystem  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
    from alerts.enhanced_alerts_system import EnhancedAlertsSystem

    # –¢–æ—Ä–≥–æ–≤–ª—è - –û–ë–ù–û–í–õ–ï–ù–û
    from trading.signal_generator import AdvancedSignalGenerator
    from trading.risk_calculator import DynamicRiskCalculator
    from trading.signal_recorder import SignalRecorder
    from trading.position_tracker import PositionTracker
    from trading.roi_tracker import ROITracker
    from trading.unified_auto_scanner import UnifiedAutoScanner  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û!

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –û–ë–ù–û–í–õ–ï–ù–û
    from analytics.mtf_analyzer import MultiTimeframeAnalyzer
    from analytics.volume_profile import EnhancedVolumeProfileCalculator
    from analytics.enhanced_sentiment_analyzer import (
        UnifiedSentimentAnalyzer,
    )  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û!

    # Telegram
    from telegram_bot.telegram_handler import TelegramBotHandler

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    from apscheduler.schedulers.asyncio import AsyncIOScheduler

    logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

except ImportError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    import traceback

    traceback.print_exc()
    sys.exit(1)


# ==================== –¶–í–ï–¢–ê –î–õ–Ø –ö–û–ù–°–û–õ–ò ====================
class Colors:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    banner = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üöÄ GIO CRYPTO BOT v3.0 Enhanced Modular üöÄ                     ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  ‚úÖ Professional Volume Profile Analysis                         ‚ïë
‚ïë  ‚úÖ Advanced News Sentiment Analysis (UNIFIED)                   ‚ïë
‚ïë  ‚úÖ Intelligent Signal Generation                                ‚ïë
‚ïë  ‚úÖ Smart Veto Protection System                                 ‚ïë
‚ïë  ‚úÖ Real-time ROI Tracking (AUTO)                                ‚ïë
‚ïë  ‚úÖ WebSocket Market Data                                        ‚ïë
‚ïë  ‚úÖ Auto Scenario Matching (UNIFIED)                             ‚ïë
‚ïë  üÜï Dynamic TP/SL Calculator                                    ‚ïë
‚ïë  üÜï MTF Trend Analysis                                          ‚ïë
‚ïë  üÜï Decision Matrix                                             ‚ïë
‚ïë  üÜï Trigger System (T1/T2/T3)                                   ‚ïë
‚ïë  üÜï Alert System (SIMPLE ALERTS)                                ‚ïë
‚ïë  üÜï Multi-Exchange Support                                      ‚ïë
‚ïë  üÜï Auto Scanner (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω)                                 ‚ïë
‚ïë  üéØ Auto ROI Tracker (TP1/TP2/TP3)                             ‚ïë
‚ïë  üéØ Enhanced Sentiment (—Å –≤–µ—Å–∞–º–∏)                               ‚ïë
‚ïë  üéØ Simple Alerts (–æ–±—ä—ë–º—ã, –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏)                         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: 100%                                            ‚ïë
‚ïë  üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


class GIOCryptoBot:
    """GIO Crypto Bot - –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info(
            f"{Colors.HEADER}üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GIOCryptoBot v3.0...{Colors.ENDC}"
        )

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        self.initialization_complete = False
        self.shutdown_event = asyncio.Event()

        # –î–∞–Ω–Ω—ã–µ
        self.market_data = {}
        self.news_cache = []

        self._last_log_time = 0

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
        self.memory_manager = None
        self.bybit_connector = None
        self.news_connector = None
        self.orderbook_ws = None
        self.scenario_manager = None
        self.scenario_matcher = None
        self.veto_system = None
        self.alert_system = None
        self.decision_matrix = None
        self.trigger_system = None
        self.mtf_analyzer = None
        self.volume_calculator = None
        self.signal_generator = None
        self.risk_calculator = None
        self.signal_recorder = None
        self.position_tracker = None
        self.roi_tracker = None
        self.telegram_bot = None
        self.scheduler = None

        # ========== –ù–û–í–´–ï –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ï –ú–û–î–£–õ–ò ==========
        self.auto_scanner = None
        self.auto_roi_tracker = None
        self.simple_alerts = None
        self.enhanced_sentiment = None
        self.enhanced_alerts = None

        logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def get_volume_profile(self, symbol: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ Volume Profile —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º L2 Orderbook

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞

        Returns:
            Volume Profile –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        try:
            logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Volume Profile...")

            # –î–∞—ë–º WebSocket –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
            if not hasattr(self, "_orderbook_ready"):
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ L2 orderbook (3 —Å–µ–∫)...")
                await asyncio.sleep(3)
                self._orderbook_ready = True

            # –ü–†–ò–û–†–ò–¢–ï–¢: L2 Orderbook ‚Üí aggTrades
            if (
                self.orderbook_ws
                and hasattr(self.orderbook_ws, "_orderbook")
                and self.orderbook_ws._orderbook
                and len(self.orderbook_ws._orderbook.get("bids", [])) > 0
            ):

                logger.info(
                    "üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ô L2 ORDERBOOK (200 LEVELS) –¥–ª—è Volume Profile"
                )

                # ========== –ò–ó–ú–ï–ù–ï–ù–û: price_levels=200 –≤–º–µ—Å—Ç–æ 50 ==========
                volume_profile = await self.volume_calculator.calculate_from_orderbook(
                    self.orderbook_ws._orderbook,
                    price_levels=200,  # ‚Üê –ë–´–õ–û 50, –°–¢–ê–õ–û 200!
                )

                if volume_profile:
                    logger.info(
                        f"   ‚úÖ L2 Orderbook Volume Profile –ø–æ–ª—É—á–µ–Ω (200 levels)"
                    )
                    logger.info(
                        f"   üìä –î–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞: {volume_profile.get('pressure', 'N/A')}"
                    )
                    logger.info(
                        f"   üìä –î–∏—Å–±–∞–ª–∞–Ω—Å: {volume_profile.get('imbalance', 0):.1%}"
                    )
                    return volume_profile
                else:
                    logger.warning(
                        "   ‚ö†Ô∏è L2 orderbook —Ä–∞—Å—á—ë—Ç –Ω–µ —É–¥–∞–ª—Å—è, fallback –Ω–∞ aggTrades"
                    )

            # Fallback –Ω–∞ aggTrades (–µ—Å–ª–∏ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º aggTrades –¥–ª—è Volume Profile (fallback)")

            try:
                trades = await self.bybit_connector.get_trades(symbol, limit=1000)

                if trades:
                    logger.info(
                        f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} trades –¥–ª—è Volume Profile"
                    )

                    return {
                        "data_source": "aggTrades",
                        "trades": trades,
                        "symbol": symbol,
                    }
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å trades")
                    return None

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è trades: {e}")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Volume Profile: {e}")
            import traceback

            logger.error(traceback.format_exc())
            return None

    # –ù–û–í–´–ô –ú–ï–¢–û–î –° –ë–ê–¢–ß–ò–ù–ì–û–ú
    async def analyze_symbol_with_batching(self, symbol: str) -> Dict:
        """
        üöÄ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ —Å –ë–ê–¢–ß–ò–ù–ì–û–ú —Å–≤–µ—á–µ–π + –ö–≠–® –ê–ù–ê–õ–ò–ó–ê

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        # ========== –ö–≠–® –ê–ù–ê–õ–ò–ó–ê ==========
        if not hasattr(self, "_analysis_cache"):
            self._analysis_cache = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
            logger.info("‚úÖ –ö—ç—à –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ö—ç—à –∫–ª—é—á: —Å–∏–º–≤–æ–ª + –º–∏–Ω—É—Ç–∞ (60 —Å–µ–∫—É–Ω–¥ TTL)
        cache_key = f"analysis_{symbol}_{int(time.time() / 60)}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self._analysis_cache:
            cached_result = self._analysis_cache[cache_key]
            cache_age = time.time() - cached_result.get("_cache_timestamp", 0)
            logger.info(f"üíæ –ö–≠–®–ò–†–û–í–ê–ù: {symbol} (–≤–æ–∑—Ä–∞—Å—Ç: {cache_age:.1f}s)")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
            cached_result["analysis_time"] = 0.001  # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return cached_result

        # ========== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ö–≠–®–ê ==========

        try:
            logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {symbol} —Å –ë–ê–¢–ß–ò–ù–ì–û–ú...")
            analysis_start = time.time()

            # üöÄ –ë–ê–¢–ß–ò–ù–ì: –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            batch_candles = await self.bybit_connector.get_klines_batch(
                symbol=symbol,
                timeframes=["60", "240", "D"],
                limits=[100, 50, 30],
                use_cache=True,
            )

            candles_1h = batch_candles.get("60", [])
            candles_4h = batch_candles.get("240", [])
            candles_1d = batch_candles.get("D", [])

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not candles_1h or not candles_4h or not candles_1d:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
                return {
                    "symbol": symbol,
                    "status": "insufficient_data",
                    "analysis_time": time.time() - analysis_start,
                }

            logger.info(
                f"üìà {symbol}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(candles_1h)} (1H), "
                f"{len(candles_4h)} (4H), {len(candles_1d)} (1D) —Å–≤–µ—á–µ–π"
            )

            # MTF –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            mtf_trends = {}

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–ñ–ï –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï —Å–≤–µ—á–∏ –∏–∑ –±–∞—Ç—á–∏–Ω–≥–∞!
                for tf_name, tf_interval, candles in [
                    ("1H", "1H", candles_1h),
                    ("4H", "4H", candles_4h),
                    ("1D", "1D", candles_1d),
                ]:
                    if candles and len(candles) >= 20:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –Ω–∞–ø—Ä—è–º—É—é
                        closes = [float(c["close"]) for c in candles]
                        deltas = [
                            closes[i] - closes[i - 1] for i in range(1, len(closes))
                        ]
                        gains = [d if d > 0 else 0 for d in deltas]
                        losses = [-d if d < 0 else 0 for d in deltas]

                        period = 14
                        avg_gain = (
                            sum(gains[-period:]) / period if len(gains) >= period else 0
                        )
                        avg_loss = (
                            sum(losses[-period:]) / period
                            if len(losses) >= period
                            else 0
                        )

                        if avg_loss == 0:
                            rsi = 100.0
                        else:
                            rs = avg_gain / avg_loss
                            rsi = 100 - (100 / (1 + rs))

                        mtf_trends[tf_name] = {
                            "direction": (
                                "UPTREND"
                                if rsi > 55
                                else "DOWNTREND" if rsi < 45 else "NEUTRAL"
                            ),
                            "rsi": rsi,
                            "timestamp": datetime.now(),
                        }

                logger.info(f"üìä MTF –∞–Ω–∞–ª–∏–∑ {symbol}: {mtf_trends}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ MTF –∞–Ω–∞–ª–∏–∑–∞: {e}")
                mtf_trends = {}

            # Volume Profile
            volume_profile = await self.get_volume_profile(symbol)

            # –ù–æ–≤–æ—Å—Ç–∏ (–ë–ï–ó await!)
            news_sentiment = (
                self.enhanced_sentiment.get_aggregated_sentiment(symbol=symbol)
                if self.enhanced_sentiment
                else {"sentiment": 0.0}
            )

            # Veto –ø—Ä–æ–≤–µ—Ä–∫–∏
            veto_checks = (
                await self.veto_system.check_all_conditions(
                    symbol=symbol,
                    market_data={
                        "price": candles_1h[-1]["close"],
                        "volume_24h": sum(c["volume"] for c in candles_1h[-24:]),
                    },
                    indicators={},
                )
                if self.veto_system
                else {"has_veto": False, "veto_reasons": [], "warnings": []}
            )

            # –°—Ü–µ–Ω–∞—Ä–∏–∏
            matched_scenario = (
                self.scenario_matcher.match_scenario(
                    symbol=symbol,
                    mtf_trends=mtf_trends,
                    market_data={"price": candles_1h[-1]["close"]},
                    indicators={},
                    volume_profile=volume_profile or {},
                    news_sentiment=news_sentiment,
                    veto_checks=veto_checks,
                )
                if self.scenario_matcher
                else None
            )

            analysis_time = time.time() - analysis_start

            result = {
                "symbol": symbol,
                "timestamp": datetime.now().isoformat(),
                "analysis_time": analysis_time,
                "candles": {
                    "1H": len(candles_1h),
                    "4H": len(candles_4h),
                    "1D": len(candles_1d),
                },
                "mtf_trends": mtf_trends,
                "volume_profile": volume_profile,
                "news_sentiment": news_sentiment,
                "veto_checks": veto_checks,
                "matched_scenario": matched_scenario,
                "status": "success",
                "_cache_timestamp": time.time(),  # ‚Üê –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫—ç—à–∞
                "_cache_key": cache_key,  # ‚Üê –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }

            # ========== –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–® ==========
            self._analysis_cache[cache_key] = result
            logger.info(f"üíæ –°–û–•–†–ê–ù–ï–ù –í –ö–≠–®: {cache_key}")

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 100 –∑–∞–ø–∏—Å–µ–π)
            if len(self._analysis_cache) > 100:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ 50 –∑–∞–ø–∏—Å–µ–π
                keys_to_delete = sorted(self._analysis_cache.keys())[:50]
                for key in keys_to_delete:
                    del self._analysis_cache[key]
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(keys_to_delete)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(self._analysis_cache)} –∑–∞–ø–∏—Å–µ–π")
            # ========== –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ö–≠–® ==========

            logger.info(f"‚úÖ {symbol}: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {analysis_time:.2f}s")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á–∏–Ω–≥–∞
            batch_stats = self.bybit_connector.get_batch_stats()
            logger.info(
                f"üìä Batch stats: "
                f"Cache hit rate: {batch_stats['cache_hit_rate']:.1%}, "
                f"Total time saved: {batch_stats['total_time_saved']:.2f}s"
            )

            return result

        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback

            logger.error(traceback.format_exc())
            return {
                "symbol": symbol,
                "status": "error",
                "error": str(e),
                "analysis_time": time.time() - analysis_start,
            }

    async def initialize(self):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info(
                f"{Colors.OKBLUE}üîß –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...{Colors.ENDC}"
            )

            # 1. Memory Manager
            logger.info("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Memory Manager...")
            self.memory_manager = AdvancedMemoryManager(max_memory_mb=1024)

            # 2. –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            logger.info("2Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤...")
            self.bybit_connector = EnhancedBybitConnector()
            await self.bybit_connector.initialize()

            self.news_connector = UnifiedNewsConnector()

            # 2.5. WebSocket Orderbook –¥–ª—è L2 –¥–∞–Ω–Ω—ã—Ö
            logger.info("2Ô∏è‚É£.5 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket Orderbook...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –¥–ª—è —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
            from connectors.bybit_orderbook_ws import BybitOrderbookWebSocket

            # ========== –û–ë–ù–û–í–õ–ï–ù–û: depth=200 –≤–º–µ—Å—Ç–æ 50 ==========
            self.orderbook_ws = BybitOrderbookWebSocket(
                "BTCUSDT", depth=200  # ‚Üê ExoCharts-—É—Ä–æ–≤–µ–Ω—å! (–±—ã–ª–æ 50)
            )

            # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook
            async def process_orderbook(orderbook):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ L2 —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
                try:
                    import time

                    current_time = time.time()

                    # –¢–æ–ø-50 bids –∏ asks (–∏–∑ 200 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
                    bids = orderbook.get("bids", [])[:50]
                    asks = orderbook.get("asks", [])[:50]

                    if not bids or not asks:
                        return

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å
                    bid_volume = sum(float(q) for p, q in bids if q)
                    ask_volume = sum(float(q) for p, q in asks if q)

                    total_volume = bid_volume + ask_volume
                    if total_volume > 0:
                        imbalance = (bid_volume - ask_volume) / total_volume

                        # –û–±–Ω–æ–≤–ª—è–µ–º market_data (–í–°–ï–ì–î–ê)
                        if "BTCUSDT" not in self.market_data:
                            self.market_data["BTCUSDT"] = {}

                        self.market_data["BTCUSDT"]["orderbook_imbalance"] = imbalance
                        self.market_data["BTCUSDT"]["bid_volume"] = bid_volume
                        self.market_data["BTCUSDT"]["ask_volume"] = ask_volume

                        # ========== –°–û–•–†–ê–ù–Ø–ï–ú FULL ORDERBOOK (200 levels) ==========
                        self.market_data["BTCUSDT"]["orderbook_full"] = {
                            "bids": orderbook.get("bids", [])[:200],
                            "asks": orderbook.get("asks", [])[:200],
                            "timestamp": current_time,
                            "depth": 200,  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        }

                        # Throttling: –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ >50% –¥–∏—Å–±–∞–ª–∞–Ω—Å–µ
                        if (
                            abs(imbalance) > 0.5
                            and (current_time - self._last_log_time) > 5
                        ):
                            direction = (
                                "üìà BUY pressure"
                                if imbalance > 0
                                else "üìâ SELL pressure"
                            )
                            logger.info(
                                f"üìä L2 –¥–∏—Å–±–∞–ª–∞–Ω—Å BTCUSDT (200 levels): "
                                f"{imbalance:.2%} {direction}"
                            )
                            self._last_log_time = current_time

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook: {e}")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º callback
            self.orderbook_ws.add_callback(process_orderbook)

            # –ó–ê–ü–£–°–ö–ê–ï–ú WebSocket!
            await self.orderbook_ws.start()

            logger.info(
                "   ‚úÖ WebSocket Orderbook –∑–∞–ø—É—â–µ–Ω –¥–ª—è BTCUSDT "
                "(depth=200, refresh=100ms)"
            )

            # 3. –°—Ü–µ–Ω–∞—Ä–∏–∏ –∏ VETO
            logger.info("3Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ VETO...")
            self.scenario_manager = ScenarioManager(db_path=DATABASE_PATH)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ JSON
            try:
                scenarios_loaded = await self.scenario_manager.load_scenarios_from_json(
                    filename="gio_scenarios_100_with_features_v3.json"
                )
                if scenarios_loaded:
                    logger.info(
                        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.scenario_manager.scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–∑ JSON"
                    )
                else:
                    logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")

            self.veto_system = EnhancedVetoSystem()

            # 4. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            logger.info("4Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
            self.mtf_analyzer = MultiTimeframeAnalyzer(self.bybit_connector)
            self.volume_calculator = EnhancedVolumeProfileCalculator()

            # 5. –°–∏—Å—Ç–µ–º—ã –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            logger.info("5Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π...")
            self.alert_system = AlertSystem()

            self.decision_matrix = DecisionMatrix()
            self.trigger_system = TriggerSystem()

            # ========== 6. –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ï –ú–û–î–£–õ–ò ==========
            logger.info("6Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–• –º–æ–¥—É–ª–µ–π...")

            self.scenario_matcher = UnifiedScenarioMatcher()
            self.scenario_matcher.scenarios = self.scenario_manager.scenarios
            logger.info(
                f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ UnifiedScenarioMatcher ({len(self.scenario_matcher.scenarios)} —à—Ç.)"
            )

            self.enhanced_sentiment = UnifiedSentimentAnalyzer()  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û!
            logger.info("   ‚úÖ UnifiedSentimentAnalyzer")

            # 7. –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–°–¢–£–ü!
            logger.info("7Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
            self.risk_calculator = DynamicRiskCalculator(
                min_rr=1.5,
                default_sl_atr_multiplier=1.5,
                default_tp1_percent=1.5,
                use_trailing_stop=True,
            )
            self.signal_recorder = SignalRecorder(db_path=DATABASE_PATH)
            self.position_tracker = PositionTracker(
                signal_recorder=self.signal_recorder
            )

            # ========== AUTO SCANNER - –û–ë–ù–û–í–õ–ï–ù–û ==========
            self.auto_scanner = UnifiedAutoScanner(
                bot_instance=self,
                scenario_matcher=self.scenario_matcher,
                risk_calculator=self.risk_calculator,
                signal_recorder=self.signal_recorder,
                position_tracker=self.position_tracker,
            )
            logger.info("   ‚úÖ UnifiedAutoScanner")

            # ========== AUTO ROI TRACKER - –î–û–ë–ê–í–õ–ï–ù–û ==========
            self.auto_roi_tracker = AutoROITracker(self)
            logger.info("   ‚úÖ AutoROITracker")

            # ========== SIMPLE ALERTS - –î–û–ë–ê–í–õ–ï–ù–û ==========
            self.simple_alerts = SimpleAlertsSystem(self)
            logger.info("   ‚úÖ SimpleAlertsSystem")

            # ========== –û–ë–´–ß–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ==========
            self.signal_generator = AdvancedSignalGenerator(
                veto_system=self.veto_system
            )

            # ‚ö†Ô∏è –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú ROITracker –ó–î–ï–°–¨ - –ë–£–î–ï–¢ –ü–û–°–õ–ï TELEGRAM!
            # self.roi_tracker = ROITracker()  # ‚Üê –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û!

            # 8. Telegram Bot (–ü–ï–†–ï–î ROITracker!)
            logger.info("8Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...")
            try:
                self.telegram_bot = TelegramBotHandler(bot_instance=self)
                await self.telegram_bot.initialize()
                logger.info("   ‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è Telegram Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.telegram_bot = None

            # ========== ROITracker –° TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò ==========
            logger.info("8Ô∏è‚É£.5 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ROITracker —Å Telegram...")
            self.roi_tracker = ROITracker(telegram_handler=self.telegram_bot)
            logger.info("   ‚úÖ ROITracker —Å real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")

            # ========== ENHANCED ALERTS - –ü–û–°–õ–ï TELEGRAM! ==========
            self.enhanced_alerts = EnhancedAlertsSystem(
                bot_instance=self,
                telegram_bot=self.telegram_bot,
            )
            logger.info("   ‚úÖ EnhancedAlertsSystem")

            # 9. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            logger.info("9Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            self.setup_scheduler()

            self.initialization_complete = True
            logger.info(
                f"{Colors.OKGREEN}‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (100%)!{Colors.ENDC}"
            )

        except Exception as e:
            logger.error(
                f"{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}{Colors.ENDC}"
            )
            import traceback

            traceback.print_exc()
            raise BotInitializationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞: {e}")


    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        try:
            self.scheduler = AsyncIOScheduler(timezone=pytz.UTC)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            self.scheduler.add_job(
                self.update_news,
                "interval",
                minutes=5,
                id="update_news",
                name="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π",
                max_instances=1,
            )

            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ scheduler: {e}")
            raise

    async def _alerts_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            logger.info("üö® –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤...")

            while self.is_running:
                try:
                    for symbol in TRACKED_SYMBOLS:
                        # 1. L2 –¥–∏—Å–±–∞–ª–∞–Ω—Å (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
                        await self.enhanced_alerts.check_l2_imbalance(symbol)

                        # 2. –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
                        await self.enhanced_alerts.check_liquidations(symbol)

                        # 3. –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä—ë–º–æ–≤ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
                        await self.enhanced_alerts.check_volume_spike(symbol)

                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                        await asyncio.sleep(1)

                    # 4. –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç)
                    await self.enhanced_alerts.check_news_alerts()

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 30 –∏—Ç–µ—Ä–∞—Ü–∏–π)
                    if not hasattr(self, "_alerts_loop_count"):
                        self._alerts_loop_count = 0

                    self._alerts_loop_count += 1

                    if self._alerts_loop_count % 30 == 0:
                        stats = self.enhanced_alerts.get_alerts_stats()
                        logger.info(
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤: "
                            f"L2={stats['l2_imbalance']}, "
                            f"Liq={stats['liquidations']}, "
                            f"Vol={stats['volume_spike']}, "
                            f"News={stats['news']}, "
                            f"Total={stats['total']}"
                        )

                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π (30 —Å–µ–∫—É–Ω–¥)
                    await asyncio.sleep(30)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                    await asyncio.sleep(60)

        except asyncio.CancelledError:
            logger.info("üõë –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ alerts monitoring: {e}")

    async def start_websocket_streams(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–æ–≤"""
        try:
            logger.info("üåê –ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–æ–≤...")
            # WebSocket —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ initialize()
            logger.info("‚úÖ WebSocket –ø–æ—Ç–æ–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞"""
        try:
            if not self.initialization_complete:
                raise BotRuntimeError("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            logger.info(
                f"{Colors.HEADER}üéØ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ GIO Crypto Bot{Colors.ENDC}"
            )
            self.is_running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram bot
            if self.telegram_bot and self.telegram_bot.enabled:
                await self.telegram_bot.start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º Auto Scanner
            if self.auto_scanner:
                asyncio.create_task(self.auto_scanner.start())
                logger.info("‚úÖ UnifiedAutoScanner –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω)")
                logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º Auto ROI Tracker
            if self.auto_roi_tracker:
                asyncio.create_task(self.auto_roi_tracker.start())
                logger.info("‚úÖ AutoROITracker –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 10 —Å–µ–∫)")

            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
            await self.start_websocket_streams()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–ª–µ—Ä—Ç–æ–≤
            if self.enhanced_alerts:
                asyncio.create_task(self._alerts_monitoring_loop())
                logger.info("‚úÖ Enhanced Alerts –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await self.update_news()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π
            if self.enhanced_sentiment and self.news_connector:
                try:
                    news = await self.news_connector.fetch_unified_news(
                        symbols=["BTC", "ETH"], max_age_hours=24
                    )
                    if news:
                        self.enhanced_sentiment.update_news_cache(news)
                        logger.info("‚úÖ –ö—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

            logger.info(
                f"{Colors.OKGREEN}üîÑ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...{Colors.ENDC}"
            )
            logger.info("‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            while self.is_running:
                await asyncio.sleep(1)

        except Exception as e:
            logger.error(
                f"{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}{Colors.ENDC}"
            )
            import traceback

            traceback.print_exc()
            raise BotRuntimeError(f"–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")

    async def update_news(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            logger.info("üì∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
            news = await self.news_connector.fetch_unified_news(
                symbols=["BTC", "ETH"], max_age_hours=24
            )

            if news:
                self.news_cache = news

                if self.enhanced_sentiment:
                    self.enhanced_sentiment.update_news_cache(news)

                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info(f"{Colors.WARNING}üõë –ù–∞—á–∞–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞...{Colors.ENDC}")
            self.is_running = False

            if self.auto_scanner:
                await self.auto_scanner.stop()
                logger.info("‚úÖ AutoScanner –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if self.auto_roi_tracker:
                await self.auto_roi_tracker.stop()
                logger.info("‚úÖ AutoROITracker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if self.enhanced_alerts:
                stats = self.enhanced_alerts.get_alerts_stats()
                logger.info(
                    f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤: "
                    f"L2={stats['l2_imbalance']}, "
                    f"Liq={stats['liquidations']}, "
                    f"Vol={stats['volume_spike']}, "
                    f"News={stats['news']}, "
                    f"Total={stats['total']}"
                )
                logger.info("‚úÖ EnhancedAlertsSystem –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

            if self.telegram_bot:
                await self.telegram_bot.stop()
                logger.info("‚úÖ Telegram bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if self.scheduler and self.scheduler.running:
                self.scheduler.shutdown(wait=False)
                logger.info("‚úÖ Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if self.bybit_connector:
                await self.bybit_connector.close()
                logger.info("‚úÖ Bybit connector –∑–∞–∫—Ä—ã—Ç")

            if self.news_connector:
                await self.news_connector.close()
                logger.info("‚úÖ News connector –∑–∞–∫—Ä—ã—Ç")

            if self.orderbook_ws:
                await self.orderbook_ws.stop()
                logger.info("‚úÖ WebSocket Orderbook –∑–∞–∫—Ä—ã—Ç")

            logger.info(f"{Colors.OKGREEN}‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.ENDC}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = None

    try:
        print_banner()

        logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
        bot = GIOCryptoBot()

        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        await bot.initialize()

        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.run()

    except KeyboardInterrupt:
        logger.info(
            f"\n{Colors.WARNING}‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C){Colors.ENDC}"
        )
    except Exception as e:
        logger.error(f"{Colors.FAIL}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        import traceback

        traceback.print_exc()
    finally:
        if bot:
            try:
                await asyncio.wait_for(bot.shutdown(), timeout=10.0)
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

        logger.info(f"{Colors.OKBLUE}üëã GIO Crypto Bot –∑–∞–≤–µ—Ä—à—ë–Ω{Colors.ENDC}")


if __name__ == "__main__":
    try:
        # –î–ª—è Windows
        if sys.platform == "win32":
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

        asyncio.run(main())

    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...{Colors.ENDC}")
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
